{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto de ETL","text":"<p>Estrutura\u00e7\u00e3o um projeto de dados do zero: extra\u00e7\u00e3o, transforma\u00e7\u00e3o e carregamento. Foram aplicadas t\u00e9cnicas de refatoriza\u00e7\u00e3o, melhorando a qualidade do c\u00f3digo e otimizando a performance.</p> <p>Aqui foi poss\u00edvel:</p> <ul> <li>entender a estrutura padr\u00e3o de projetos, com a organiza\u00e7\u00e3o dos diret\u00f3rios, fun\u00e7\u00f5es e m\u00f3dulos, documenta\u00e7\u00e3o e testes;</li> <li>compreender ferramentas de desenvolvimento como PIP e Poetry;</li> <li>realizar testes unit\u00e1rios utilizando o Pytest;</li> <li>fazer o versionamento com Git e Github;</li> <li>compreender o que cada arquivo do projeto representa;</li> <li>documentar o projeto usando o Mkdocs.</li> </ul>"},{"location":"#estrutura-do-projeto","title":"Estrutura do projeto","text":"<pre><code>graph TB\n    A[M\u00faltiplos arquivos excel] --&gt; B(Extract: extract_from_excel)\n    B --&gt; |Gerar uma lista de dataframes| C(Transformation: consolidate_dataframes)\n    C --&gt; |Gerar um dataframe consolidado| D(Load: converte para excel)\n    D --&gt; |Salva o consolidado em excel| E(Pasta output: um \u00fanico arquivo em excel)</code></pre>"},{"location":"#funcoes-e-modulos-do-projeto","title":"Fun\u00e7\u00f5es e m\u00f3dulos do projeto","text":""},{"location":"#funcao-de-extracao-extract","title":"Fun\u00e7\u00e3o de extra\u00e7\u00e3o (extract)","text":"<p>Fun\u00e7\u00e3o para ler e extrair os arquivos em Excel</p> <p>type: input_folder: str (caminho da pasta).</p> Source code in <code>app\\pipeline\\extract.py</code> <pre><code>def extract_from_excel(path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    Fun\u00e7\u00e3o para ler e extrair os arquivos em Excel\n\n    type: input_folder: str (caminho da pasta).\n    \"\"\"\n    all_files = glob.glob(os.path.join(path, \"*.xlsx\"))\n\n    data_frame_list = []\n    for file in all_files:\n        data = pd.read_excel(file)\n        data_frame_list.append(data)\n\n    return data_frame_list\n</code></pre>"},{"location":"#funcao-de-transformacao-transform-de-dados","title":"Fun\u00e7\u00e3o de transforma\u00e7\u00e3o (transform) de dados","text":"<p>Fun\u00e7\u00e3o para transformar uma lista de dataframes em um \u00fanico dataframe.</p> Source code in <code>app\\pipeline\\transform.py</code> <pre><code>def contact_data_frames(data_frame_list: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"\n    Fun\u00e7\u00e3o para transformar uma lista de dataframes em um \u00fanico dataframe.\n    \"\"\"\n    return pd.concat(data_frame_list, ignore_index=True)\n</code></pre>"},{"location":"#funcao-de-carregamento-load-de-dados","title":"Fun\u00e7\u00e3o de carregamento (load) de dados","text":"<p>receber um dataframe e salvar como excel</p> <p>args: data_frame (pd.DataFrame): dataframe a ser salvo como excel output_path (str): caminho onde o arquivo ser\u00e1 salvo file_name (str): nome do arquivo a ser salvo</p> <p>return: \"Arquivo salvo com sucesso.\"</p> Source code in <code>app\\pipeline\\load.py</code> <pre><code>def load_excel(data_frame: pd.DataFrame, output_path: str, file_name: str) -&gt; str:\n    \"\"\"\n    receber um dataframe e salvar como excel\n\n    args:\n    data_frame (pd.DataFrame): dataframe a ser salvo como excel\n    output_path (str): caminho onde o arquivo ser\u00e1 salvo\n    file_name (str): nome do arquivo a ser salvo\n\n    return: \"Arquivo salvo com sucesso.\"\n\n    \"\"\"\n    if not os.path.exists(output_path):\n        os.makedirs(output_path)\n\n    data_frame.to_excel(f\"{output_path}/{file_name}.xlsx\", index=False)\n    return \"Arquivo salvo com sucesso\"\n</code></pre>"}]}